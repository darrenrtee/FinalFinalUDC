
import java.awt.Component;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


public class uploadsong extends javax.swing.JFrame {

    private Dashboard owner;
    private Connection connection;
    private User user;
    private ArrayList<Song> songs;
    private File fileChosen;
    SimpleDateFormat datefor = new SimpleDateFormat("yyyy-MM-dd");
    
    public uploadsong() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        songchooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        choosefileBTN = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        genreCombobox = new javax.swing.JComboBox<>();
        uploadSongButton = new javax.swing.JButton();
        filenameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Upload Song");

        choosefileBTN.setText("Choose File");
        choosefileBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choosefileBTNMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Genre:");

        genreCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Happy", "Sad", "Senti" }));

        uploadSongButton.setText("Upload");
        uploadSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadSongButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genreCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(348, 348, 348))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(choosefileBTN))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(uploadSongButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(choosefileBTN)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genreCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(uploadSongButton)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choosefileBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choosefileBTNMouseClicked
        choosesong();
    }//GEN-LAST:event_choosefileBTNMouseClicked

    private void uploadSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadSongButtonActionPerformed
        uploadsongMethod();
    }//GEN-LAST:event_uploadSongButtonActionPerformed
        public void setcon(Connection connection){
            this.connection = connection;
        }
        public Connection getcon(){
            return this.connection;
        }
        public void setuser(User user)
        {
            this.user = user;
        }

        public User getuser()
        {
            return this.user;
        }

        public ArrayList<Song> getSongs() {
            return songs;
        }

        public void setSongs(ArrayList<Song> songs) {
            this.songs = songs;
        }


        public void setOwner(Dashboard owner) {
            this.owner = owner;
        }
        
        
        
    public void choosesong() {
            int result = songchooser.showOpenDialog(this);
            fileChosen = songchooser.getSelectedFile();
            String fileName = "";
            String artist = "";
     
            if(result != JFileChooser.CANCEL_OPTION)
            {
                if(fileChosen != null){
                    artist = getuser().getusername();
                    fileName = fileChosen.getName();
                    boolean exists = false;
                    Statement statech;
                    try {
                        statech = getcon().createStatement();
                        ResultSet resultch = statech.executeQuery("SELECT * FROM databasedc.song");
                        while(resultch.next())
                        {
                            if(resultch.getString("SongTitle").equals(fileName) && resultch.getInt("UserID") == getuser().getid())
                            {
                                exists = true;
                                break;
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    if(exists){
                        JOptionPane.showMessageDialog(null, "Song Already Uploaded!", "Song Already Exists",JOptionPane.INFORMATION_MESSAGE);
                        fileChosen = null;
                    }
                    
                    else
                        filenameLabel.setText(fileName);
                }
            }
    }
    
    public void uploadsongMethod(){
        if(fileChosen != null) {
            if(genreCombobox.getSelectedItem().toString().equals("None"))
                JOptionPane.showMessageDialog(null, "You must select a genre first!", "No genre selected",JOptionPane.INFORMATION_MESSAGE);
            else {
                try {
                    Statement statement = getcon().createStatement();
                    ResultSet rs = statement.executeQuery("SELECT * FROM databasedc.followuser");
                    
                    while(rs.next()){
                        Statement updateStatement = getcon().createStatement();
                        updateStatement.execute("UPDATE databasedc.followuser SET Notify = '"+"true"+"' WHERE FollowUserID = '"+getuser().getid()+"'");
                    }
                    
                    PreparedStatement insertSongStatement = getcon().prepareStatement("INSERT INTO databasedc.song(SongBlob, SongTitle, SongArtist, SongGenre, UserID, UploadedDate) VALUES(?, ?, ?, ?, ?, ?)");
                    insertSongStatement.setBlob(1, INSERTBLOBHERE);
                    insertSongStatement.setString(2, fileChosen.getName());
                    insertSongStatement.setString(3, getuser().getusername());
                    insertSongStatement.setString(4, genreCombobox.getSelectedItem().toString());
                    insertSongStatement.setInt(5, getuser().getid());
                    insertSongStatement.setString(6, datefor.format(new Date()));
                    
                    insertSongStatement.execute();
                    
                    Statement getSongID = getcon().createStatement();
                    ResultSet songIDrs = getSongID.executeQuery("SELECT MAX(SongID) FROM databasedc.song");
                    
                    int songIDmax = 0;
                    
                    while(songIDrs.next()){
                        songIDmax = songIDrs.getInt("MAX(SongID)");
                    }
                    
                    Director build = new Director();
                    if(genreCombobox.getSelectedItem().toString().equals("Happy")){
                        build.setSongBuilder(new HappyBuilder());
                        build.constructSong(songIDmax, "", fileChosen.getName(), getuser().getusername());
                    }
                    else if(genreCombobox.getSelectedItem().toString().equals("Sad")){
                        build.setSongBuilder(new SadBuilder());
                        build.constructSong(songIDmax, "", fileChosen.getName(), getuser().getusername());
                    }
                    else if(genreCombobox.getSelectedItem().toString().equals("Senti")){
                        build.setSongBuilder(new SentiBuilder());
                        build.constructSong(songIDmax, "", fileChosen.getName(), getuser().getusername());
                    }
                    else{
                        build.setSongBuilder(new NoBuilder());
                        build.constructSong(songIDmax, "", fileChosen.getName(), getuser().getusername());
                    }
                    
                    songs.add(build.getSong());
                    owner.setYoursongs(songs);
                } catch (SQLException ex) {
                    Logger.getLogger(uploadsong.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        else
            JOptionPane.showMessageDialog(null, "You must upload a song first!", "No file uploaded",JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(uploadsong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(uploadsong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(uploadsong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(uploadsong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new uploadsong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choosefileBTN;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JComboBox<String> genreCombobox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JFileChooser songchooser;
    private javax.swing.JButton uploadSongButton;
    // End of variables declaration//GEN-END:variables
}
